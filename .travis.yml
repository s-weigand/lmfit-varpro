sudo: false
language: python
cache: pip
matrix:
  fast_finish: true
  include:
  - python: 3.6
    env: TOXENV=flake8
    before_install:
    - echo "before_install"
    - python -m pip install -U pip>=9.0.1
    - pip install tox
    script:
    - tox
    after_success:
    - echo "done"
  - python: 3.6
    env: TOXENV=docs
    before_install:
    - echo "before_install"
    - python -m pip install -U pip>=9.0.1
    - pip install tox
    script:
    - tox
    after_success:
    - echo "done"
  - python: '3.6'
    env:
    - linux-py36
    - DEPLOY_ALL=true
  - python: 3.7-dev
    env: linux-py37
  - language: generic
    os: osx
    env: osx-py36
    before_install:
    - echo "before_install"
    - wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh
      -O miniconda.sh;
    - bash miniconda.sh -b -p $HOME/miniconda
    - export PATH="$HOME/miniconda/bin:$PATH"
    - conda update conda -y
    - conda create -n py36 python=3.6 -y
    - source activate py36
    - python -m pip install -U pip>=9.0.1
  - language: generic
    env: osx-py37
    os: osx
    before_install:
    - echo "before_install"
    - wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh
      -O miniconda.sh;
    - bash miniconda.sh -b -p $HOME/miniconda
    - export PATH="$HOME/miniconda/bin:$PATH"
    - conda update conda -y
    - conda create -n py37 python=3.7 -y
    - source activate py37
    - python -m pip install -U pip>=9.0.1
before_install:
- echo "before_install"
- python -m pip install -U pip>=9.0.1
install:
- pip install coveralls
- pip install -r requirements_dev.txt
script:
- pip install .
- py.test --cov=lmfit_varpro --cov-config .coveragerc tests/
- pip freeze
after_success:
- coveralls
- coverage erase
deploy:
  provider: pypi
  distributions: sdist bdist_wheel
  user: s-weigand
  server: https://test.pypi.org/legacy/
  skip_cleanup: true
  password:
    secure: GFkhTBhhSoBcMDE/AWqSK6LrjlKooKn+AhtuA4vP+zrQKAHVuc6UcndvcJVbTpGs8IRZwLCZerQuEKV+khOiOCjBq4z3+/valhCzr4sPcv5WH5XYFzm04+pahcthTpfEuWHhHdBJHQBZKCKOktPe8ExdbfaDLUQpqsAaLRCxRN4pqUD+DO2X7+j/aOGxTYT6LcG5ETcLyWYocgTanyR46pC6AZM5pCLSG/NX1RIe4uI3V/+HRa+DBSBqg5lWgqGHKHEMwH9X6SyqPFFNfD8Sbgwz07uyOIG+kkd2aO6t6K2svpB+cintSu84FKjdlXstGnVZeFfy5od8q+R/pY8hzT6C2iTanrxU+pUsUnwsuq3gIF3OxuYg6pugDiDyf+JiyijQVk9Ryx1o5MKiCkXjSMBoNV2JQODQmd50R2ZuSwcdVQGJzlczqrAEZ/Di+NlVhgR0wfqiUHjiTjLxiBwkRigpKab36zRL2jQm1L19eTNTOxrRSKQvLmTzgdA9egKwHdFukC7ivO7Q7St6s0CbjXBC6ujRGXh1E/VJKCCMCLf20WU+1N4icT4T05QOAw5D/LuVLdCmJpo6DKUowCwwV9p/ZSGQSTRGiZkQbA0rZcVxdW7OkzOpxKZn5rmKr40TeARQDw3Asm8vEhRcn6hc0tY5/Os3vzAXT7BZa5v3sE8=
  on:
    tags: true
    repo: s-weigand/lmfit-varpro
    condition: "$DEPLOY_ALL = true"
notifications:
  slack:
    rooms:
    - secure: VidmiSSh3NBpBRsbe/Y4z02rEW/VNvW6IA47AgbVQkWM2D/f5p26vqequ4GHCDNJJzSUn5FX85eTj+p9nssXeVWJW3/KNp/NX0DTiylixj1Ep4myTfhWJwQlV56bq+7OZCjwRF290oTz4XECUQ6cL/+JeYH3E4GaAz3T9kxhpfZfP+dMJ8FIjQgaT5UorlcY3uFjx4FgScTyJPNyv0vzwpNc2KQVIWBVe3KBpnqkoYDGCjU4rVUa61HJ+agfYi0UelxyaRZKyMw1+EjTPZqpLBX2QKreAv7wWvbsVvmb+3jC/jlndVSN0HSG513nSUEAmd10I2YoWSPj5Ri8aMcBkJLVbt/Y8pedoHcAY8yam/Z5Pqh4lqvaP9tGJTLoIFzFkmrWnvtnx4bp+8QKSvK9SFhX2l90AoNKhwpYnAssMKgbtCeR3IJCEU99XpsT2DiKknvJKLQ+dcATv05b7XEnu5be46LllcykfoF6L64ZUyBPimlleGufdWNJzs/VWVHbVxZePlVpfX/Bp9sCq/uX1u3xosA1NWjiexw1R37u/fBTxELFuRR/jYOm7ON/YC/2yjHox05009WZy0IIzxwURpBH6YU0mQgXYFgTJGkNLN3418pXr0doN2LNgrfBUbAcD8jFVyx7aOJiGee3TP7/MKZRLhJcWs4uUKNWCqgtPbs=
